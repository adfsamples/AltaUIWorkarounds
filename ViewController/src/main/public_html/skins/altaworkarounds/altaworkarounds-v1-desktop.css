@charset "UTF-8";

/**ADFFaces_Skin_File / DO NOT REMOVE**/
@namespace af "http://xmlns.oracle.com/adf/faces/rich";
@namespace dvt "http://xmlns.oracle.com/dss/adf/faces";

/*****************************************************************************************************************
 * Alta UI Workarounds
 ****************************************************************************************************************/

/* To align inline-level boxes, the basic idea here is to align them 
 * vertically using "vertical-align: middle", then make sure the height 
 * of all inline-level boxes is as described below.
 * 
 * For replaced inline elements, inline-block elements, and inline-table
 * elements, the height of the inline-level box is their margin box; 
 * for non-replaced inline elements, it's their "line-height". Thus, we use
 * a global line-height; setup a target line box height, then try best to 
 * make the height of margin boxes of all inline elements other than 
 * non-replaced inline elements to be the target line box height.
 *
 * To simplify alignment, as long as possible, try keep vertical padding
 * and margin distributed evenly to the top and bottom side, so that 
 * they work for any "vertical-align" value in the same way. For 
 * horizontal padding and margin, distribute them evenly to the left 
 * and right side, so that they work for both ltr and rtl direction.
 */
.XTargetLineBoxHeight:alias {
  height: 28px;
}

/* The target line-height in pixel for the default font-size (12px) is 18px,
 * thus set line-height here to unitless value of 1.5 (18/12 = 1.5). 
 */
.XDefaultLineHeight:alias {
  line-height: 1.5;
}

/* margin box height = border box height + margin-top + margin-bottom */
.XDefaultFormControlHeightMarginBox:alias {
  -tr-rule-ref: selector(".XTargetLineBoxHeight:alias");
}

.XDefaultFormControlHeightBorderBox:alias {
  -tr-rule-ref: selector(".XTargetLineBoxHeight:alias");
}

.XFormControlVerticalMargins:alias {
  margin-top: 0;
  margin-bottom: 0;
}

/* TODO: revisit this setting */
.XFormCellVerticalPaddings:alias {
  padding-top: 2px;
  padding-bottom: 2px;
}

/*
 * Start of panelFormLayout
 */
 
/* in panelFormLayout, use consistent line-height for better vertical
 * alignment and vertical distribution. 
 */
af|panelFormLayout {
  -tr-rule-ref: selector(".XDefaultLineHeight:alias");
}

/* use the same padding for the top and bottom of the form cell to simplify
 * the logic of vertical spacing between cells.
 */
.AFPanelFormLayoutContentCell,
af|panelFormLayout::content-cell,
af|panelFormLayout::label-cell,
af|panelLabelAndMessage::content-cell.AFPanelFormLayoutContentCell {
  -tr-rule-ref: selector(".XFormCellVerticalPaddings:alias");
}

/* make horizontal padding even, and align them vertically with non-input
 * content, such as content of the inputText. 
 * cell padding + input border + input padding 
 * = -tr-output-content-padding
 * See below.
 */
.AFPanelFormLayoutContentCell,
af|panelFormLayout::content-cell,
af|panelLabelAndMessage::content-cell.AFPanelFormLayoutContentCell,
.AFPanelFormLayoutContentCell:rtl,
af|panelFormLayout::content-cell:rtl,
af|panelLabelAndMessage::content-cell.AFPanelFormLayoutContentCell:rtl {
  padding-left: 7px; 
  padding-right: 7px;
}

/* For non-input content, we need to render some padding on the panelLabelAndMessage
 * content-cell to align the leading edge of the content with the input content. */
/*
af|panelLabelAndMessage {
  -tr-output-content-padding: 14px;
}
*/

/* make label an fixed-height inline-block element, so that it aligns with
 * other components easier, either for start or top labelAlignment, or 
 * for top, middle or bottom vertical-align.
 */
.XLabel:alias {
  box-sizing: border-box;
  display: inline-block;
  vertical-align: middle;
  padding: 5px 0;
  -tr-rule-ref: selector(".XDefaultLineHeight:alias");    
  -tr-rule-ref: selector(".XTargetLineBoxHeight:alias");
}

af|panelFormLayout label {
  -tr-rule-ref: selector(".XLabel:alias");
}

/*
 * Start of inputText
 */

/* basic styling of inputText */
.XInputText:alias {
  box-sizing: border-box;
  display: inline-block;
  vertical-align: middle;
  margin: 0;
  padding: 4px 6px;
  border-width: 1px;
  -tr-rule-ref: selector(".XDefaultLineHeight:alias");    
  -tr-rule-ref: selector(".XTargetLineBoxHeight:alias");    
}

af|inputText::content {
  -tr-rule-ref: selector(".XInputText:alias");    
}

af|inputText::label {
  -tr-inhibit: padding-top;
}
af|inputText::label:rtl {
  -tr-inhibit: padding-top;
}

af|inputText:multi-row af|inputText::label {
  -tr-inhibit: padding-top; /* padding-top: 0px; (6644) */
}

af|inputText:read-only .AFPanelFormLayoutContentCell,
af|inputText:multi-row .AFPanelFormLayoutContentCell {
  -tr-inhibit: padding-top; /* padding-top: 0px; (6736) */
}

@agent webkit {
  af|inputText::label {
    -tr-inhibit: padding-top;
  }

  af|inputText:multi-row af|inputText::label {
    -tr-inhibit: padding-top;
  }
  
  af|inputText:multi-row:read-only af|inputText::label {
    -tr-inhibit: vertical-align;
    -tr-inhibit: padding-top;
  }    
}

@agent gecko {
  af|inputText:multi-row af|inputText::label {
    -tr-inhibit: padding-top;
  }
  
  af|inputText:multi-row:read-only af|inputText::label {
    -tr-inhibit: padding-top;
  }
}

/* End of inputText */

/*
 * Start of selectOneRadio
 */
af|selectBooleanCheckbox::content,
af|selectManyCheckbox::content,
af|selectBooleanRadio::content,
af|selectOneRadio::content {
  /* normalize */
  box-sizing: border-box;
  display: inline-block;
  vertical-align: middle;
  -tr-rule-ref: selector(".XDefaultLineHeight:alias"); /* See: Alta (10146) */
}

/* reset native radio and checkbox input elements, so that they line up 
 * with their labels properly. 
 */
.XSelectOneRadioNativeInput:alias {
  position: static;
  vertical-align: middle;
  margin: 0;
  padding: 0;    
}

af|selectBooleanRadio::native-input,
af|selectOneRadio::native-input,
af|selectBooleanCheckbox::native-input,
af|selectManyCheckbox::native-input,
af|selectBooleanRadio::native-input:rtl,
af|selectOneRadio::native-input:rtl,
af|selectBooleanCheckbox::native-input:rtl,
af|selectManyCheckbox::native-input:rtl {
    -tr-rule-ref: selector(".XSelectOneRadioNativeInput:alias");
}

@agent webkit, gecko, ie {
  af|selectOneRadio::native-input,
  af|selectBooleanRadio::native-input,
  af|selectBooleanCheckbox::native-input,
  af|selectManyCheckbox::native-input,
  af|selectOneRadio::native-input:rtl,
  af|selectBooleanRadio::native-input:rtl,
  af|selectBooleanCheckbox::native-input:rtl,
  af|selectManyCheckbox::native-input:rtl {
    -tr-rule-ref: selector(".XSelectOneRadioNativeInput:alias");
  }
}

/* simplify the padding and margin of the radio and checkbox element. use
 * even horizontal margin only for the container (content-input) of 
 * the native input element.
 */
.XSelectRadioContentInput:alias {
  vertical-align: middle;
  margin: 0 4px;
  padding: 0;    
}

af|selectBooleanCheckbox::content-input,
af|selectManyCheckbox::content-input,
af|selectBooleanRadio::content-input,
af|selectOneRadio::content-input,
af|selectBooleanCheckbox::content-input:rtl
af|selectManyCheckbox::content-input:rtl,
af|selectBooleanRadio::content-input:rtl,
af|selectOneRadio::content-input:rtl {
  -tr-rule-ref: selector(".XSelectRadioContentInput:alias");
}

@agent gecko, webkit, ie {
  af|selectBooleanCheckbox::content-input,
  af|selectManyCheckbox::content-input,
  af|selectBooleanRadio::content-input,
  af|selectOneRadio::content-input,
  af|selectBooleanCheckbox::content-input:rtl
  af|selectManyCheckbox::content-input:rtl,
  af|selectBooleanRadio::content-input:rtl,
  af|selectOneRadio::content-input:rtl {
    -tr-rule-ref: selector(".XSelectRadioContentInput:alias");
  }
}

/* enhancement: add some space between select items */
af|selectBooleanCheckbox::item-text + af|selectBooleanCheckbox::content-input,
af|selectManyCheckbox::item-text + af|selectManyCheckbox::content-input,
af|selectBooleanRadio::item-text + af|selectBooleanRadio::content-input,
af|selectOneRadio::item-text + af|selectOneRadio::content-input {
    margin-left: 10px;
}

@agent webkit {
  af|selectOneRadio af|panelFormLayout::label-cell {
    -tr-inhibit: all; /* padding-top: 7px; (10392) */
  }    
}
/* End of selectOneRadio */

/*
 * Start of selectBooleanRadio
 */

/* End of selectBooleanRadio */

/*
 * Start of selectManyCheckbox
 */
@agent webkit {
  af|selectManyCheckbox .AFPanelFormLayoutContentCell {
    -tr-rule-ref: selector(".AFPanelFormLayoutContentCell"); /* padding-top: 1px; (9712) */
  }
}
/* End of selectManyCheckbox */

/*
 * Start of inputDate
 */

af|inputDate::content {
    -tr-rule-ref: selector("af|inputText::content");
}

/* bugfix: When the inputDate component is grouped with other sibling components in a
 * panelGroupLayout component, and placed in a panelLabelAndMessage component, and then in a
 * panelFormLayout component, it might not be vertically aligned properly in webkit browsers.
 */
@agent webkit {
  af|panelLabelAndMessage::content-cell.AFPanelFormLayoutContentCell af|inputDate {
    -tr-inhibit: vertical-align; /* vertical-align: 50%; (ln:6133) */
  }
}

/*
 * Start of inputNumberSpinbox
 */
af|inputNumberSpinbox::content {
  -tr-rule-ref: selector(".XInputText:alias");
  margin-right: 0;
}

af|inputNumberSpinbox::content:rtl {
  margin-left: 0;
}

af|inputNumberSpinbox::increment-cell,
af|inputNumberSpinbox::decrement-cell,
af|chooseDate::increment-cell,
af|chooseDate::decrement-cell {
  display: inline-block;
  box-sizing: border-box;
  vertical-align: middle;
  -tr-rule-ref: selector(".XDefaultFormControlHeightBorderBox:alias");    
  -tr-rule-ref: selector(".XFormControlVerticalMargins:alias");    
  line-height: 1.4;
  padding-left: 0px;
}

af|inputNumberSpinbox::incrementor-icon-style,
af|inputNumberSpinbox::decrementor-icon-style,
af|chooseDate::spinbox-incrementor-icon-style,
af|chooseDate::spinbox-decrementor-icon-style {
  box-sizing: border-box;
  display: inline-block;
}

@agent ie {
  af|inputNumberSpinbox::content,
  af|inputNumberSpinbox::increment-cell,
  af|chooseDate::increment-cell,
  af|inputNumberSpinbox::decrement-cell,
  af|chooseDate::decrement-cell {
    box-sizing: border-box;
    display: inline-block;
    vertical-align: middle;
    -tr-rule-ref: selector(".XDefaultFormControlHeightBorderBox:alias");    
  }
}

/*
 * Start of miscellaneous enhancements
 */

/* add traling margin to form controls so that horizontally consecutive
 * controls are not too close to each others.
 */
af|inputColor,
af|inputComboboxListOfValues,
af|inputDate,
af|inputFile,
af|inputListOfValues,
af|inputNumberSpinbox,
af|inputText,
af|selectBooleanCheckbox,
af|selectBooleanRadio,
af|selectManyChoice,
af|selectOneChoice,
af|commandImageLink,
af|commandLink,
af|goImageLink,
af|goLink,
af|button,
af|commandToolbarButton,
af|link,
af|outputFormatted,
af|outputLabel,
af|outputText {
  margin-right: 5px;
}

af|inputColor:rtl,
af|inputComboboxListOfValues:rtl,
af|inputDate:rtl,
af|inputFile:rtl,
af|inputListOfValues:rtl,
af|inputNumberSpinbox:rtl,
af|inputText:rtl,
af|selectBooleanCheckbox:rtl,
af|selectBooleanRadio:rtl,
af|selectManyChoice:rtl,
af|selectOneChoice:rtl,
af|commandImageLink:rtl,
af|commandLink:rtl,
af|goImageLink:rtl,
af|goLink:rtl,
af|button:rtl,
af|commandToolbarButton:rtl,
af|link:rtl,
af|outputFormatted:rtl,
af|outputLabel:rtl,
af|outputText:rtl {
  margin-left: 5px;
}

/* make sure vertically grouped components use the same vertical paddings 
 * as the form cells, so that consecutive components in the group will not
 * stack up too close to each others.
 */
af|panelGroupLayout > DIV,
af|selectOneRadio::content > DIV,
af|selectManyCheckbox::content > FIELDSET > DIV {
  -tr-rule-ref: selector(".XFormCellVerticalPaddings:alias");
}
af|panelGroupLayout > DIV:first-of-type,
af|selectOneRadio::content > DIV:first-of-type,
af|selectManyCheckbox::content > FIELDSET > DIV:first-of-type {
  padding-top: 0;
}
af|panelGroupLayout > DIV:last-of-type,
af|selectOneRadio::content > DIV:last-of-type,
af|selectManyCheckbox::content > FIELDSET > DIV:last-of-type {
  padding-bottom: 0;
}
